#include "Image_Buffer.h"

void Image_Buffer_Clear(unsigned char grey) {
	int i, j;
	for(i = 0; i < SCREEN_WITDH; i++)
		for(j = 0; j < SCREEN_HEIGHT; j++)
			I_buffer[i][j] = grey;
}

void Image_Screen_Addmask(int x_coord, int y_coord, unsigned char mask[DOT_DIAMETER][DOT_DIAMETER]) {
	int i, j, x, y;
	int x = 800 - (y_coord * 800 / 4096);
	int y = 480 - (x_coord * 480 / 4096);
	for(i = -DOT_RADIUS; i <= DOT_RADIUS; i++)
		for(j = -DOT_RADIUS; j <= DOT_RADIUS; j++)
			if(i + x >= 0 && j + y >= 0 && i + x < SCREEN_WITDH && j + y < SCREEN_HEIGHT)
					if(mask[MASK_MID + i][MASK_MID + j] < I_buffer[i + x][j + y]) // The original color will be overlapped by a deeper color
						I_buffer[i + x][j + y] = mask[MASK_MID + i][MASK_MID + j];
}

void Write_Pixel_Color(unsigned int *Base_Addr, int x, int y, unsigned int grey) {
	unsigned int offset = (y * 800 + x);
	unsigned int data;
	data = (offset << 12) + grey;
	*(Base_Addr) = data;
}

void Draw_Pixel_XYCOORD(int x, int y, unsigned char grey, unsigned int *Base_Addr) {
	int i = 800 - (y * 800 / 4096);
	int j = 480 - (x * 480 / 4096);
	*(Base_Addr) = ((i + j * 800) << 12) + grey;
}
