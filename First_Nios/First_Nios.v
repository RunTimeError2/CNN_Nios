
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module First_Nios(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// LED //////////
	LEDG,
	LEDR,

	//////////// KEY //////////
	KEY,

	//////////// SEG7 //////////
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,

	//////////// LCD //////////
	LCD_BLON,
	LCD_DATA,
	LCD_EN,
	LCD_ON,
	LCD_RS,
	LCD_RW,

	//////////// SDCARD //////////
	SD_CLK,
	SD_CMD,
	SD_DAT,
	SD_WP_N,

	//////////// IR Receiver //////////
	IRDA_RXD,

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,
	
	//////////// SRAM //////////
	SRAM_ADDR,
	SRAM_CE_N,
	SRAM_DQ,
	SRAM_LB_N,
	SRAM_OE_N,
	SRAM_UB_N,
	SRAM_WE_N,

	//////////// Flash //////////
	FL_ADDR,
	FL_CE_N,
	FL_DQ,
	FL_OE_N,
	FL_RST_N,
	FL_RY,
	FL_WE_N,
	FL_WP_N,

	//////////// GPIO, GPIO connect to LTM - 4.3" LCD and Touch //////////
	LTM_ADC_BUSY,
	LTM_ADC_DCLK,
	LTM_ADC_DIN,
	LTM_ADC_DOUT,
	LTM_ADC_PENIRQ_n,
	LTM_B,
	LTM_DEN,
	LTM_G,
	LTM_GREST,
	LTM_HD,
	LTM_NCLK,
	LTM_R,
	LTM_SCEN,
	LTM_SDA,
	LTM_VD 
);
//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// LED //////////
output		     [8:0]		LEDG;
output		    [17:0]		LEDR;

//////////// KEY //////////
input 		     [3:0]		KEY;

//////////// SEG7 //////////
output		     [6:0]		HEX0;
output		     [6:0]		HEX1;
output		     [6:0]		HEX2;
output		     [6:0]		HEX3;
output		     [6:0]		HEX4;
output		     [6:0]		HEX5;
output		     [6:0]		HEX6;
output		     [6:0]		HEX7;

//////////// LCD //////////
output		          		LCD_BLON;
inout 		     [7:0]		LCD_DATA;
output		          		LCD_EN;
output		          		LCD_ON;
output		          		LCD_RS;
output		          		LCD_RW;

//////////// SDCARD //////////
output		          		SD_CLK;
inout 		          		SD_CMD;
inout 		     [3:0]		SD_DAT;
input 		          		SD_WP_N;

//////////// IR Receiver //////////
input 		          		IRDA_RXD;

//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [31:0]		DRAM_DQ;
output		     [3:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;

//////////// SRAM //////////
output		    [19:0]		SRAM_ADDR;
output		          		SRAM_CE_N;
inout 		    [15:0]		SRAM_DQ;
output		          		SRAM_LB_N;
output		          		SRAM_OE_N;
output		          		SRAM_UB_N;
output		          		SRAM_WE_N;

//////////// Flash //////////
output		    [22:0]		FL_ADDR;
output		          		FL_CE_N;
inout 		     [7:0]		FL_DQ;
output		          		FL_OE_N;
output		          		FL_RST_N;
input 		          		FL_RY;
output		          		FL_WE_N;
output		          		FL_WP_N;

//////////// GPIO, GPIO connect to LTM - 4.3" LCD and Touch //////////
input 		          		LTM_ADC_BUSY;
output		          		LTM_ADC_DCLK;
output		          		LTM_ADC_DIN;
input 		          		LTM_ADC_DOUT;
input 		          		LTM_ADC_PENIRQ_n;
output		     [7:0]		LTM_B;
output		          		LTM_DEN;
output		     [7:0]		LTM_G;
output		          		LTM_GREST;
output		          		LTM_HD;
output		          		LTM_NCLK;
output		     [7:0]		LTM_R;
output		          		LTM_SCEN;
inout 		          		LTM_SDA;
output		          		LTM_VD;

//=======================================================
//  Structural coding
//=======================================================
//---------Reset_N Delay------------//
reg [19:0]		Cont;
reg				Reset_N;
always@(posedge CLOCK_50)	begin
	if(Cont != 20'hFFFFF) begin
		Cont <= Cont + 1;
		Reset_N <= 1'b0;
	end
	else Reset_N <= 1'b1;
end

wire 								Clk_Core;
wire								Clk_Sdram;
assign							DRAM_CLK = Clk_Sdram;
PLL	PLL_inst (
	.inclk0 ( CLOCK_50 ),
	.c0 ( Clk_Core ),  //Phrase 0   degree 100Mhz
	.c1 ( Clk_Sdram )  //Phrase -72 degree 100Mhz
	);
	

 kernel u0 (
  //--------------- 时钟 ---------------
  .clk_clk                           			(Clk_Core), 
  //--------------- LCD驱动 ---------------
  .lcd1602_demo_conduit_end_0_export_data 	(LCD_DATA), 
  .lcd1602_demo_conduit_end_0_export_rw   	(LCD_RW),
  .lcd1602_demo_conduit_end_0_export_en   	(LCD_EN),
  .lcd1602_demo_conduit_end_0_export_rs   	(LCD_RS), 
  .lcd1602_demo_conduit_end_0_export_blon 	(LCD_BLON),
  .lcd1602_demo_conduit_end_0_export_on 		(LCD_ON),
  //--------------- PIO & Reset ---------------
  .pio_external_connection_export    			(User_Pio),
  .reset_reset_n                     			(Reset_N), 
  //--------------- SDRAM ---------------
  .sdram_controller_wire_addr        			(DRAM_ADDR),
  .sdram_controller_wire_ba          			(DRAM_BA),  
  .sdram_controller_wire_cas_n       			(DRAM_CAS_N), 
  .sdram_controller_wire_cke         			(DRAM_CKE),  
  .sdram_controller_wire_cs_n        			(DRAM_CS_N), 
  .sdram_controller_wire_dq          			(DRAM_DQ),  
  .sdram_controller_wire_dqm         			(DRAM_DQM), 
  .sdram_controller_wire_ras_n       			(DRAM_RAS_N), 
  .sdram_controller_wire_we_n        			(DRAM_WE_N),
  //--------------- PWM示例 ---------------
  .user_gio_pwm_conduit_end_0_export 			(User_GPIO_PWM),
  //--------------- 红外接收 ---------------
  .user_ir_conduit_end_0_export_input 			(IRDA_RXD),
  //--------------- 数码管 ---------------
  .user_seg8_conduit_end_0_export_0       	(HEX0), 
  .user_seg8_conduit_end_0_export_1       	(HEX1), 
  .user_seg8_conduit_end_0_export_2       	(HEX2), 
  .user_seg8_conduit_end_0_export_3       	(HEX3), 
  .user_seg8_conduit_end_0_export_4       	(HEX4), 
  .user_seg8_conduit_end_0_export_5       	(HEX5), 
  .user_seg8_conduit_end_0_export_6       	(HEX6), 
  .user_seg8_conduit_end_0_export_7       	(HEX7),
  //--------------- 触屏识别 ---------------
  .user_ltm_adc_conduit_end_0_export_irst_n        (DLY0), 						//0号延迟重置信号
  .user_ltm_adc_conduit_end_0_export_oadc_din      (LTM_ADC_DIN), 			//传输给ADC的数字信号
  .user_ltm_adc_conduit_end_0_export_oadc_dclk     (adc_dclk), 				//传输给LTM屏的ADC时钟
  .user_ltm_adc_conduit_end_0_export_oadc_cs       (), 
  .user_ltm_adc_conduit_end_0_export_iadc_dout     (LTM_ADC_DOUT), 			//来自LTM屏的ADC结果（串口形式）
  .user_ltm_adc_conduit_end_0_export_iadc_busy     (LTM_ADC_BUSY), 			//忙信号
  .user_ltm_adc_conduit_end_0_export_iadc_penirq_n (LTM_ADC_PENIRQ_n), 		//来自LTM屏的触摸中断信号
  .user_ltm_adc_conduit_end_0_export_otouch_irq    (touch_irq), 				//输出的触摸中断信号
  //--------------- LTM屏幕显示 ---------------
  .user_sram_bw_conduit_end_0_export_osram_addr    (SRAM_ADDR), 				//地址信号
  .user_sram_bw_conduit_end_0_export_iosram_dq     (SRAM_DQ), 					//数据IO
  .user_sram_bw_conduit_end_0_export_osram_we_n    (SRAM_WE_N), 				//写使能
  .user_sram_bw_conduit_end_0_export_osram_oe_n    (SRAM_OE_N), 				//读使能（内存输出使能）
  .user_sram_bw_conduit_end_0_export_osram_ub_n    (SRAM_UB_N), 				//高字节控制
  .user_sram_bw_conduit_end_0_export_osram_lb_n    (SRAM_LB_N), 				//低字节控制
  .user_sram_bw_conduit_end_0_export_osram_ce_n    (SRAM_CE_N), 				//片选
  .user_sram_bw_conduit_end_0_export_irst_n        (DLY2), 						//2号延迟重置信号，与lcd_timing_controller一致
  .user_sram_bw_conduit_end_0_export_osram_data    (Data_for_timing_ctl), 	//将数据输出到lcd_timing_controller
  .user_sram_bw_conduit_end_0_export_iread_sram_en (mRead), 					//来自lcd_timing_controller的内存扫描使能
  .user_sram_bw_conduit_end_0_export_iclk50m       (clk_25M) 					//提供给LTM屏图像显示的25MHz时钟
 );
 
 wire oCLK50M, oCLK50M_ctl;
 assign oCLK50M_ctl = oCLK50M;
 wire [31:0] Data_for_timing_ctl;
 wire mRead;

 assign LEDG[0]=User_Pio;
 assign LEDR[0]=User_GPIO_PWM;
 
 // LTM的基础驱动直接写在顶层模块中，需要连接总线的模块写在软核中
 // 3个特殊的延迟重置信号
 wire DLY0;
 wire DLY1;
 wire DLY2;
 // 给ADC的时钟
 assign LTM_ADC_DCLK	= ( adc_dclk & ltm_3wirebusy_n )  |  ( ~ltm_3wirebusy_n & ltm_sclk );
 wire adc_dclk;
 wire ltm_3wirebusy_n;
 wire ltm_sclk;
 wire touch_irq;
 
lcd_spi_controller	inst_lcd_spi	(	
					.iCLK(CLOCK_50),
					.iRST_n(DLY0),
					// LTM屏的三线控制器
					.o3WIRE_SCLK(ltm_sclk),
					.io3WIRE_SDAT(LTM_SDA),
					.o3WIRE_SCEN(LTM_SCEN),
					.o3WIRE_BUSY_n(ltm_3wirebusy_n)
					);	

// 特殊延迟重置信号发生
Reset_Delay	inst_reset_delay  (
					.iCLK(CLOCK_50),		//50MHz时钟
					.iRST(KEY[0]), 		//用0号按键控制输入重置信号
					.oRST_0(DLY0),
					.oRST_1(DLY1),
					.oRST_2(DLY2)
					);
					
reg clk_25M;
always@(posedge CLOCK_50)
begin
	clk_25M <= !clk_25M;
end

lcd_timing_controller	inst_lcd_timing_ctl  ( 
					.iCLK(clk_25M), 							//25MHz时钟，比50MHz工作稳定
					.iRST_n(DLY2), 							//使用2号延迟重置信号
					//连接SRAM驱动模块
					.iREAD_DATA(Data_for_timing_ctl), 	//32位颜色信息，[31:24]为R，[23:16]为G，[15:8]为B
					.oREAD_SDRAM_EN(mRead),					//内存扫描使能
					//连接LTM屏
					.oLCD_R(LTM_R), 							//R，8位
					.oLCD_G(LTM_G), 							//G，8位
					.oLCD_B(LTM_B),  							//B，8位
					.oHD(LTM_HD), 								//换行信号
					.oVD(LTM_VD), 								//换列信号
					.oDEN(LTM_DEN)								//使能信号
					);
			
assign LTM_GREST = KEY[0];
assign LTM_NCLK = clk_25M;
 
endmodule
